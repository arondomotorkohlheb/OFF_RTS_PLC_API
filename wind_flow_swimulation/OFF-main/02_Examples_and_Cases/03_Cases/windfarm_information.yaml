# //////////////////////////////////////////////////////////////////// #
#    ____  ______ ______ 
#   / __ \|  ____|  ____|
#  | |  | | |__  | |__   
#  | |  | |  __| |  __|  
#  | |__| | |    | |     
#   \____/|_|    |_|     
# //////////////////////////////////////////////////////////////////// #
# Copyright (C) <2024>, M Becker (TUDelft), M Lejeune (UCLouvain)

# List of the contributors to the development of OFF: see LICENSE file.
# Description and complete License: see LICENSE file.
  
# This program (OFF) is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program (see COPYING file).  If not, see <https://www.gnu.org/licenses/>.


# Wind farm information
wind_farm:
  name: turbine array
  description: Nine turbine case with IEA 10 MW turbines at 5D distance

  farm:
    layout_x:
      - 0.0
      - 5.0
      - 10.0
      - 0.0
      - 5.0
      - 10.0
      - 0.0
      - 5.0
      - 10.0
    layout_y:
      - 0.0
      - 0.0
      - 0.0
      - 5.0
      - 5.0
      - 5.0
      - 10.0
      - 10.0
      - 10.0
    layout_z:
      - 0.0
      - 0.0
      - 0.0
      - 0.0
      - 0.0
      - 0.0
      - 0.0
      - 0.0
      - 0.0
    turbine_type:
      - mask
      - mask
      - mask
      - mask
      - mask
      - mask
      - mask
    unit:
      - D
    diameter: # Only needed if unit was set to D
      - 198.0
    boundaries_xyz:
      - -2.0
      - 12.0
      - -4.0
      - 4.0
      - 0.0
      - 5.0


# Ambient conditions used during the simulation
#  Currently the code only supports time variations of the wind speed and direction. If a single value is given, it is assumed to be constant.
#  There is also only one ambient corrector as of now.
ambient:
  name: ambient_conditions
  description: Constant wind speed at 8m/s coming from 270 deg (0 deg = north)

  flow_field: # This struct is passed on to the AmbientCorrector to feed in the new flow properties
    air_density: 1.225
    reference_wind_height: 119.0 # Needs to be defined as FLORIS expects different turbine types (-1 might still work)
    turbulence_intensities:
      - 0.06
    wind_directions: # a single value indicates constant conditions, multiple lead to linear interpolation
      - 225.0
      - 225.0
      - 235.0
      - 235.0
    wind_directions_t:
      - 0.0
      - 600.0
      - 900.0
      - 1200.0
    wind_shear: 0.12
    wind_speeds: # a single value indicates constant conditions, multiple lead to linear interpolation
      - 8.0
    wind_speeds_t:
      - 0.0
    wind_veer: 0.0
    corr_overwrite_direction: true # All states are overwritten instead of only the first particle state

# Wake solver settings
#  Here we select the Temporary Wind Farm (TWF) solver and the FLORIS wake model
#   As of writing, the TWFSolver is the ONLY wake solver available. It can use any FLORIS model, as well as a build in PythonGaussianWake model.
#   For future wake solvers, the initialization of the solver needs to be adapted, as it is hardcoded of now (see OFF.__init__).
# solver:
#   name: TWF FLORIS
#   description: FLORIDyn - A dynamic and flexible framework for real-time wind farm control, Becker et al. 2022

#   settings:
#     wake_solver: "TWFSolver"
#     wake_model: "FLORIS GCH" #"PythonGaussianWake" # "FLORIS GCH"
#     op_propagation: "frozen turbulence"
#     extrapolation: "pair"
#     # Number of OPs per turbine. The chain of OPs should span long enough to cover the whole wind farm.
#     #  n_op * time_step * u_free_stream = covered distance
#     n_op: 200


# Wake model settings
#   These need to fit the wake model that the wake solver is using.
# wake:
#   name: GCH
#   description: Gaussian Curl Hybrid wake model

#   settings:
#     # The yaml path is used to create an input file for the FLORIS model, before it is moved to the run folder
#     yaml_path: "02_Examples_and_Cases/00_Inputs/01_FLORIS/not_relevant_.yaml"
#     # The FLORIS input file is generated based on the settings linked below as well as the info in this yaml (e.g. turbine type, layout)
#     floris_logging: "02_Examples_and_Cases/00_Inputs/01_FLORIS/00_Logging/warning_none.yaml"
#     floris_solver: "02_Examples_and_Cases/00_Inputs/01_FLORIS/01_Solver/turbine_grid_3.yaml"
#     # This is where the floris model and settings are changed!
#     floris_wake: "02_Examples_and_Cases/00_Inputs/01_FLORIS/02_Wake/gch.yaml"
#     # Settings not used yet
#     nRP: 10
#     rotor discretization: Isocell

# turbine:
#   masked_turbine:
#     name: empty turbine model to interface OFF with incoming TurbineStates object # Source: FLORIS v3.4, adapted for OFF
#     generator_efficiency: 1.0
#     hub_height: 119.0
#     pP: 1.88
#     pT: 1.88
#     rotor_diameter: 198.0
#     TSR: 8.0
#     ref_density_cp_ct: 1.225
#     ref_tilt_cp_ct: 6.0
#     turbine_type: mask
#     installation: fixed
#     rotor_overhang: 7.07        # in m
#     shaft_tilt: 5               # in deg
#     yaw_rate_lim: 0.3           # deg/s
